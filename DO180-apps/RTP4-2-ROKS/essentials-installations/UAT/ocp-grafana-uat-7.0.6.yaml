COMPUTED VALUES:
admin:
  existingSecret: ""
  existingSecretPasswordKey: password
  password: admin
  user: admin
clusterDomain: cluster.local
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
commonAnnotations: {}
commonLabels: {}
config:
  grafanaIniConfigMap: grafana-config
  grafanaIniSecret: ""
  useGrafanaIniFile: true
dashboardsConfigMaps: []
dashboardsProvider:
  configMapName: ""
  enabled: false
datasources:
  secretName: ""
diagnosticMode:
  args:
  - infinity
  command:
  - sleep
  enabled: false
extraDeploy: []
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
  storageClass: ""
grafana:
  affinity: {}
  args: []
  command: []
  containerPorts:
    grafana: 3000
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraConfigmaps: {}
  extraEnvVars: {}
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  initContainers: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 120
    path: /api/health
    periodSeconds: 10
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 5
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: false
    fsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    path: /api/health
    periodSeconds: 10
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 6
    initialDelaySeconds: 30
    path: /api/health
    periodSeconds: 10
    scheme: HTTP
    successThreshold: 1
    timeoutSeconds: 5
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
hostAliases: []
image:
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/grafana
  tag: 8.2.2-debian-10-r5
imageRenderer:
  affinity: {}
  args: []
  command: []
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
  enabled: true
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/grafana-image-renderer
    tag: 3.2.1-debian-10-r13
  initContainers: {}
  metrics:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    enabled: false
    serviceMonitor:
      enabled: false
      interval: ""
      namespace: ""
      scrapeTimeout: ""
  nodeSelector: {}
  podAnnotations: {}
  podSecurityContext:
    enabled: false
    fsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      grafana: ""
    ports:
      imageRenderer: 8080
    type: ClusterIP
  tolerations: []
  topologySpreadConstraints: []
ingress:
  annotations: {}
  apiVersion: ""
  enabled: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  hostname: grafana.local
  ingressClassName: ""
  path: /
  pathType: ImplementationSpecific
  secrets: []
  selfSigned: false
  tls: false
kubeVersion: ""
ldap:
  allowSignUp: false
  configMapName: ""
  configuration: ""
  enabled: false
  secretName: ""
metrics:
  enabled: false
  service:
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "3000"
      prometheus.io/scrape: "true"
  serviceMonitor:
    additionalLabels: {}
    enabled: false
    honorLabels: false
    interval: ""
    jobLabel: ""
    metricRelabelings: []
    namespace: ""
    scrapeTimeout: ""
    selector: {}
nameOverride: ""
persistence:
  accessMode: ReadWriteOnce
  accessModes: []
  annotations: {}
  enabled: true
  existingClaim: ""
  size: 25Gi
  storageClass: ibmc-block-silver
plugins: ""
service:
  annotations: {}
  clusterIP: ""
  externalTrafficPolicy: Cluster
  extraPorts: []
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  nodePorts:
    grafana: ""
  ports:
    grafana: 3000
  type: ClusterIP
serviceAccount:
  annotations: {}
  automountServiceAccountToken: false
  create: true
  name: ""
smtp:
  enabled: false
  existingSecret: ""
  existingSecretPasswordKey: password
  existingSecretUserKey: user
  host: ""
  password: password
  user: user
volumePermissions:
  containerSecurityContext:
    runAsUser: 0
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r232
  resources:
    limits: {}
    requests: {}
